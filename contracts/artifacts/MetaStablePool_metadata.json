{
	"compiler": {
		"version": "0.7.1+commit.f4a555be"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "contract IVault",
								"name": "vault",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "symbol",
								"type": "string"
							},
							{
								"internalType": "contract IERC20[]",
								"name": "tokens",
								"type": "address[]"
							},
							{
								"internalType": "contract IRateProvider[]",
								"name": "rateProviders",
								"type": "address[]"
							},
							{
								"internalType": "uint256[]",
								"name": "priceRateCacheDuration",
								"type": "uint256[]"
							},
							{
								"internalType": "uint256",
								"name": "amplificationParameter",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "swapFeePercentage",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "pauseWindowDuration",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "bufferPeriodDuration",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "oracleEnabled",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							}
						],
						"internalType": "struct MetaStablePool.NewPoolParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startValue",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endValue",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					}
				],
				"name": "AmpUpdateStarted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "currentValue",
						"type": "uint256"
					}
				],
				"name": "AmpUpdateStopped",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "enabled",
						"type": "bool"
					}
				],
				"name": "OracleEnabledChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "paused",
						"type": "bool"
					}
				],
				"name": "PausedStateChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rate",
						"type": "uint256"
					}
				],
				"name": "PriceRateCacheUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IRateProvider",
						"name": "provider",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "cacheDuration",
						"type": "uint256"
					}
				],
				"name": "PriceRateProviderSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "swapFeePercentage",
						"type": "uint256"
					}
				],
				"name": "SwapFeePercentageChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "enableOracle",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "selector",
						"type": "bytes4"
					}
				],
				"name": "getActionId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAmplificationParameter",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isUpdating",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "precision",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAuthorizer",
				"outputs": [
					{
						"internalType": "contract IAuthorizer",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getLargestSafeQueryWindow",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getLastInvariant",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "lastInvariant",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lastInvariantAmp",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum IPriceOracle.Variable",
						"name": "variable",
						"type": "uint8"
					}
				],
				"name": "getLatest",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOracleMiscData",
				"outputs": [
					{
						"internalType": "int256",
						"name": "logInvariant",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "logTotalSupply",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "oracleSampleCreationTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "oracleIndex",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "oracleEnabled",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "enum IPriceOracle.Variable",
								"name": "variable",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "ago",
								"type": "uint256"
							}
						],
						"internalType": "struct IPriceOracle.OracleAccumulatorQuery[]",
						"name": "queries",
						"type": "tuple[]"
					}
				],
				"name": "getPastAccumulators",
				"outputs": [
					{
						"internalType": "int256[]",
						"name": "results",
						"type": "int256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPausedState",
				"outputs": [
					{
						"internalType": "bool",
						"name": "paused",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "pauseWindowEndTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "bufferPeriodEndTime",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPoolId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					}
				],
				"name": "getPriceRateCache",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "rate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "duration",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expires",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRateProviders",
				"outputs": [
					{
						"internalType": "contract IRateProvider[]",
						"name": "providers",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getSample",
				"outputs": [
					{
						"internalType": "int256",
						"name": "logPairPrice",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "accLogPairPrice",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "logBptPrice",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "accLogBptPrice",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "logInvariant",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "accLogInvariant",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getScalingFactors",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getSwapFeePercentage",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "enum IPriceOracle.Variable",
								"name": "variable",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "secs",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "ago",
								"type": "uint256"
							}
						],
						"internalType": "struct IPriceOracle.OracleAverageQuery[]",
						"name": "queries",
						"type": "tuple[]"
					}
				],
				"name": "getTimeWeightedAverage",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "results",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTotalSamples",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getVault",
				"outputs": [
					{
						"internalType": "contract IVault",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "balances",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "lastChangeBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "protocolSwapFeePercentage",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "userData",
						"type": "bytes"
					}
				],
				"name": "onExitPool",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "amountsOut",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "dueProtocolFeeAmounts",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "balances",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "lastChangeBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "protocolSwapFeePercentage",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "userData",
						"type": "bytes"
					}
				],
				"name": "onJoinPool",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "amountsIn",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "dueProtocolFeeAmounts",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							},
							{
								"internalType": "contract IERC20",
								"name": "tokenIn",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "tokenOut",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "lastChangeBlock",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "from",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}
						],
						"internalType": "struct IPoolSwapStructs.SwapRequest",
						"name": "request",
						"type": "tuple"
					},
					{
						"internalType": "uint256[]",
						"name": "balances",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "indexIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "indexOut",
						"type": "uint256"
					}
				],
				"name": "onSwap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							},
							{
								"internalType": "contract IERC20",
								"name": "tokenIn",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "tokenOut",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "lastChangeBlock",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "from",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}
						],
						"internalType": "struct IPoolSwapStructs.SwapRequest",
						"name": "request",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "balanceTokenIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceTokenOut",
						"type": "uint256"
					}
				],
				"name": "onSwap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "balances",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "lastChangeBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "protocolSwapFeePercentage",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "userData",
						"type": "bytes"
					}
				],
				"name": "queryExit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "bptIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "amountsOut",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "balances",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "lastChangeBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "protocolSwapFeePercentage",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "userData",
						"type": "bytes"
					}
				],
				"name": "queryJoin",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "bptOut",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "amountsIn",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "poolConfig",
						"type": "bytes"
					}
				],
				"name": "setAssetManagerPoolConfig",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "paused",
						"type": "bool"
					}
				],
				"name": "setPaused",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "duration",
						"type": "uint256"
					}
				],
				"name": "setPriceRateCacheDuration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "swapFeePercentage",
						"type": "uint256"
					}
				],
				"name": "setSwapFeePercentage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "rawEndValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					}
				],
				"name": "startAmplificationParameterUpdate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stopAmplificationParameterUpdate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					}
				],
				"name": "updatePriceRateCache",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "StablePool suitable for assets with proportional prices (i.e. with slow-changing exchange rates between them). Requires an external feed of these exchange rates. It additionally features a price oracle.",
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
				},
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Override to allow decreasing allowance by more than the current amount (setting it to zero)"
				},
				"enableOracle()": {
					"details": "Balancer Governance can always enable the Oracle, even if it was originally not enabled. This allows for Pools that unexpectedly drive much more volume and liquidity than expected to serve as Price Oracles. Note that the Oracle can only be enabled - it can never be disabled."
				},
				"getActionId(bytes4)": {
					"details": "Returns the action identifier associated with the external function described by `selector`."
				},
				"getLargestSafeQueryWindow()": {
					"details": "Returns largest time window that can be safely queried, where 'safely' means the Oracle is guaranteed to be able to produce a result and not revert. If a query has a non-zero `ago` value, then `secs + ago` (the oldest point in time) must be smaller than this value for 'safe' queries."
				},
				"getLatest(uint8)": {
					"details": "Returns latest sample of `variable`. Prices are represented as 18 decimal fixed point values."
				},
				"getPastAccumulators((uint8,uint256)[])": {
					"details": "Returns the accumulators corresponding to each of `queries`."
				},
				"getPausedState()": {
					"details": "Returns the current contract pause status, as well as the end times of the Pause Window and Buffer Period."
				},
				"getPriceRateCache(address)": {
					"details": "Returns the cached value for token's rate"
				},
				"getRate()": {
					"details": "This function returns the appreciation of one BPT relative to the underlying tokens. This starts at 1 when the pool is created and grows over time"
				},
				"getRateProviders()": {
					"details": "Returns the rate providers configured for each token (in the same order as registered)."
				},
				"getSample(uint256)": {
					"details": "Returns the raw data of the sample at `index`."
				},
				"getTimeWeightedAverage((uint8,uint256,uint256)[])": {
					"details": "Returns the time average weighted price corresponding to each of `queries`. Prices are represented as 18 decimal fixed point values."
				},
				"getTotalSamples()": {
					"details": "Returns the total number of samples."
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"nonces(address)": {
					"details": "See {IERC20Permit-nonces}."
				},
				"onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
					"details": "Update cached total supply and invariant using the results after the exit that will be used for future oracle updates. Note this function does not perform any safety checks about exits, it relies on upper implementations for that."
				},
				"onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
					"details": "Update cached total supply and invariant using the results after the join that will be used for future oracle updates. Note this function does not perform any safety checks about joins, it relies on upper implementations for that."
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "See {IERC20Permit-permit}."
				},
				"queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
					"details": "Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the Vault with the same arguments, along with the number of tokens `recipient` would receive. This function is not meant to be called directly, but rather from a helper contract that fetches current Vault data, such as the protocol swap fee percentage and Pool balances. Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must explicitly use eth_call instead of eth_sendTransaction."
				},
				"queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
					"details": "Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the Vault with the same arguments, along with the number of tokens `sender` would have to supply. This function is not meant to be called directly, but rather from a helper contract that fetches current Vault data, such as the protocol swap fee percentage and Pool balances. Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must explicitly use eth_call instead of eth_sendTransaction."
				},
				"setPriceRateCacheDuration(address,uint256)": {
					"details": "Sets a new duration for a token price rate cache. It reverts if there was no rate provider set initially. Note this function also updates the current cached value.",
					"params": {
						"duration": "Number of seconds until the current rate of token price is fetched again."
					}
				},
				"startAmplificationParameterUpdate(uint256,uint256)": {
					"details": "Begins changing the amplification parameter to `rawEndValue` over time. The value will change linearly until `endTime` is reached, when it will be `rawEndValue`. NOTE: Internally, the amplification parameter is represented using higher precision. The values returned by `getAmplificationParameter` have to be corrected to account for this when comparing to `rawEndValue`."
				},
				"stopAmplificationParameterUpdate()": {
					"details": "Stops the amplification parameter change process, keeping the current value."
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance"
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)": {
					"notice": "Override to make sure sender is vault"
				},
				"onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256)": {
					"notice": "Override to make sure sender is vault"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/MetaStablePoolFactory.sol": "MetaStablePool"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/MetaStablePoolFactory.sol": {
			"keccak256": "0x18c4696133f33da03b00bde5fba928c156e4530fac35d190b7128a78a50bb721",
			"urls": [
				"bzz-raw://e6bdad938c981d96388c77c6aa75c777db251ebefe5736931e6ca4a01571f8eb",
				"dweb:/ipfs/QmX45wiyEcoCa7paWmL4fudxXJwTJ8S6VkpdA6eCBpPAa6"
			]
		}
	},
	"version": 1
}